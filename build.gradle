import groovy.json.JsonSlurper

plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.2.0'
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
    id "com.google.devtools.ksp" version "2.2.0-2.0.2"
}

group = 'net.asere.kthot'
version = '0.1.5'

repositories {
    mavenCentral()
}

dependencies {
    implementation project(path: ':kotlin-js-dsl-html')
    implementation project(path: ':kotlin-js-dsl-dom')
    implementation project(path: ':kotlin-js-dsl')
    implementation project(path: ':kotlin-js-dsl-ksp')
    ksp project(path: ':kotlin-js-dsl-ksp')
    implementation "io.ktor:ktor-server-html-builder:3.0.3"
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
}

test {
    useJUnitPlatform()
}
kotlin {
    jvmToolchain(17)
}

nexusPublishing {
    repositories {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
            username = properties.getProperty("ossrhUsername")
            password = properties.getProperty("ossrhPassword")
        }
    }
}

tasks.register('publishToSonatypeCentral') {
    description = 'Publishes artifacts to Sonatype Central by finding the staged repository and promoting it.'

    dependsOn ':kotlin-js-dsl:publish'
    dependsOn ':kotlin-js-dsl-html:publish'
    dependsOn ':kotlin-js-dsl-dom:publish'
    dependsOn ':kotlin-js-dsl-ksp:publish'

    doLast {
        println "Starting Sonatype Central publishing process..."

        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        def ossrhUsername = properties.getProperty('ossrhUsername')
        def ossrhPassword = properties.getProperty('ossrhPassword')

        def connectTimeoutMs = 60000
        def readTimeoutMs = 60000

        if (!ossrhUsername || !ossrhPassword) {
            throw new GradleException("Error: 'ossrhUsername' and 'ossrhPassword' must be defined in your local.properties.")
        }

        def authString = "${ossrhUsername}:${ossrhPassword}"
        def authEncoded = authString.bytes.encodeBase64().toString()

        def searchUrl = "https://ossrh-staging-api.central.sonatype.com/manual/search/repositories?ip=any&profile_id=net.asere.kthot"
        def repositoriesToPromote = []

        println "Attempting to fetch staged repository keys from: ${searchUrl}"
        try {
            def url = new URL(searchUrl)
            def connection = url.openConnection() as HttpURLConnection
            connection.setRequestMethod("GET")
            connection.setRequestProperty("Authorization", "Basic ${authEncoded}")
            connection.setConnectTimeout(connectTimeoutMs)
            connection.setReadTimeout(readTimeoutMs)

            def responseCode = connection.getResponseCode()
            println "GET response code: ${responseCode}"

            if (responseCode == HttpURLConnection.HTTP_OK) {
                def reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))
                def responseBody = reader.collect( { it } ).join('\n')
                reader.close()

                println "GET response body: ${responseBody}"

                def jsonSlurper = new JsonSlurper()
                def result = jsonSlurper.parseText(responseBody)

                if (result.repositories && !result.repositories.isEmpty()) {
                    repositoriesToPromote.addAll(result.repositories)
                    println "Successfully retrieved ${repositoriesToPromote.size()} repository(ies)."
                } else {
                    println "No repositories found or unexpected JSON structure in GET response. Nothing to promote."
                }
            } else {
                def errorReader = new BufferedReader(new InputStreamReader(connection.getErrorStream()))
                def errorBody = errorReader.collect( { it } ).join('\n')
                errorReader.close()
                throw new GradleException("Failed to fetch repository keys. HTTP Error: ${responseCode} - ${connection.getResponseMessage()}. Response: ${errorBody}")
            }
        } catch (Exception e) {
            throw new GradleException("Error during GET request to Sonatype API: ${e.message}", e)
        }

        if (repositoriesToPromote.isEmpty()) {
            println "No repositories found to promote. Task finished."
            return
        }

        repositoriesToPromote.each { repo ->
            def repositoryKey = repo.key
            def repositoryState = repo.state

            if (!repositoryKey) {
                println "Warning: Repository found without a 'key'. Skipping this entry: ${repo}"
                return
            }

            if (repositoryState == "open") {
                def postUrl = "https://ossrh-staging-api.central.sonatype.com/manual/upload/repository/${repositoryKey}"

                println "Attempting to promote OPEN repository '${repositoryKey}' (State: ${repositoryState}) using POST to: ${postUrl}"
                try {
                    def url = new URL(postUrl)
                    def connection = url.openConnection() as HttpURLConnection
                    connection.setRequestMethod("POST")
                    connection.setRequestProperty("Authorization", "Basic ${authEncoded}")
                    connection.setDoOutput(true)
                    connection.setConnectTimeout(connectTimeoutMs)
                    connection.setReadTimeout(readTimeoutMs)

                    def responseCode = connection.getResponseCode()
                    println "POST response code for '${repositoryKey}': ${responseCode}"

                    if (responseCode >= 200 && responseCode < 300) {
                        def reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))
                        def responseBody = reader.collect( { it } ).join('\n')
                        reader.close()
                        println "POST successful for repository '${repositoryKey}'. Response: ${responseBody}"
                    } else {
                        def errorReader = new BufferedReader(new InputStreamReader(connection.getErrorStream()))
                        def errorBody = errorReader.collect( { it } ).join('\n')
                        errorReader.close()
                        println "Failed to promote repository '${repositoryKey}'. HTTP Error: ${responseCode} - ${connection.getResponseMessage()}. Response: ${errorBody}"
                        dropFailedRepository(repositoryKey, authEncoded, connectTimeoutMs, readTimeoutMs)
                    }
                } catch (Exception e) {
                    println "Error during POST request for repository '${repositoryKey}' to Sonatype API: ${e.message}"
                }
            } else {
                println "Skipping repository '${repositoryKey}' because its state is '${repositoryState}' (only 'open' repositories are promoted)."
            }
        }
        println "Sonatype Central publishing process completed for all found 'open' repositories."
    }
}

def dropFailedRepository(String repositoryKey, String authEncoded, int connectTimeoutMs, int readTimeoutMs) {
    def dropUrl = "https://ossrh-staging-api.central.sonatype.com/service/local/staging/bulk/drop"

    def jsonPayload = """{
           "data":{
              "stagedRepositoryIds":[
                 "${repositoryKey}"
              ],
              "description":"Dropping failed staged repository.",
              "autoDropAfterRelease": true
           }
        }"""

    println "!! Attempting to DROP FAILED repository '${repositoryKey}' using POST to: ${dropUrl}"

    try {
        def url = new URL(dropUrl)
        def connection = url.openConnection() as HttpURLConnection
        connection.setRequestMethod("POST") // Use POST method
        connection.setRequestProperty("Authorization", "Basic ${authEncoded}")
        connection.setRequestProperty("Content-Type", "application/json") // Required for JSON body
        connection.setDoOutput(true)
        connection.setConnectTimeout(connectTimeoutMs)
        connection.setReadTimeout(readTimeoutMs)

        def outputStream = connection.getOutputStream()
        outputStream.write(jsonPayload.getBytes('UTF-8'))
        outputStream.close()

        def responseCode = connection.getResponseCode()
        println "!! POST (Drop) response code for '${repositoryKey}': ${responseCode}"

        if (responseCode >= 200 && responseCode < 300) {
            def reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))
            def responseBody = reader.collect( { it } ).join('\n')
            reader.close()
            println "!! Successfully DROPPED repository '${repositoryKey}'. Response: ${responseBody}"
        } else {
            def errorReader = new BufferedReader(new InputStreamReader(connection.getErrorStream()))
            def errorBody = errorReader.collect( { it } ).join('\n')
            errorReader.close()
            println "!! WARNING: Failed to drop repository '${repositoryKey}'. HTTP Error: ${responseCode} - ${connection.getResponseMessage()}. Response: ${errorBody}"
        }
    } catch (Exception e) {
        println "!! FATAL: Error during POST (Drop) request for repository '${repositoryKey}'. Manual cleanup may be required: ${e.message}"
    }
}